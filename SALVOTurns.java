/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package jasonguzonSALVOmidterm;

import java.awt.CardLayout;
import java.awt.Color;

/**
 *
 * @author jason
 */
public class SALVOTurns extends javax.swing.JFrame {

    /**
     * Creates new form SALVOTurns
     */
    public SALVOTurns() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        playersChoices = new javax.swing.ButtonGroup();
        jOptionPane1 = new javax.swing.JOptionPane();
        playersShipPanel = new javax.swing.JPanel();
        playersShipLabel = new javax.swing.JLabel();
        pGuns = new javax.swing.JLabel();
        pGunsQuotation = new javax.swing.JLabel();
        pSternPlus = new javax.swing.JLabel();
        pStern = new javax.swing.JLabel();
        pShipName = new javax.swing.JLabel();
        pBroadsidePlus = new javax.swing.JLabel();
        pBroadside = new javax.swing.JLabel();
        pBowPlus = new javax.swing.JLabel();
        pBow = new javax.swing.JLabel();
        pArmor = new javax.swing.JLabel();
        pSpeedArmorDash = new javax.swing.JLabel();
        pSpeed = new javax.swing.JLabel();
        pTurret = new javax.swing.JLabel();
        pFlotation = new javax.swing.JLabel();
        enemysShipPanel = new javax.swing.JPanel();
        enemysShipLabel = new javax.swing.JLabel();
        eGuns = new javax.swing.JLabel();
        eGunsQuotation = new javax.swing.JLabel();
        eSternPlus = new javax.swing.JLabel();
        eStern = new javax.swing.JLabel();
        eShipName = new javax.swing.JLabel();
        eBroadsidePlus = new javax.swing.JLabel();
        eBroadside = new javax.swing.JLabel();
        eBowPlus = new javax.swing.JLabel();
        eBow = new javax.swing.JLabel();
        eArmor = new javax.swing.JLabel();
        eSpeedArmorDash = new javax.swing.JLabel();
        eSpeed = new javax.swing.JLabel();
        eTurret = new javax.swing.JLabel();
        eFlotation = new javax.swing.JLabel();
        die1 = new javax.swing.JTextField();
        die2 = new javax.swing.JTextField();
        die3 = new javax.swing.JTextField();
        rollDiceButton = new javax.swing.JButton();
        turnsCardPanel = new javax.swing.JPanel();
        getFirstTurnPanel = new javax.swing.JPanel();
        getFirstTurnButton = new javax.swing.JButton();
        getFirstTurnText = new javax.swing.JTextField();
        continueFirstTurnButton = new javax.swing.JButton();
        playerTurnPanel = new javax.swing.JPanel();
        playerTurnLabel = new javax.swing.JLabel();
        closeRadioButton = new javax.swing.JRadioButton();
        offerBroadsideRadioButton = new javax.swing.JRadioButton();
        withdrawRadioButton = new javax.swing.JRadioButton();
        continuePlayerTurnButton = new javax.swing.JButton();
        enemyTurnPanel = new javax.swing.JPanel();
        enemyTurnLabel = new javax.swing.JLabel();
        getEnemyMoveButton = new javax.swing.JButton();
        enemyMoveText = new javax.swing.JTextField();
        continueEnemyTurnButton = new javax.swing.JButton();
        playerFirePanel = new javax.swing.JPanel();
        playerFireLabel = new javax.swing.JLabel();
        playerFireButton = new javax.swing.JButton();
        playerFireStatusText = new javax.swing.JTextField();
        playerFireContinueButton = new javax.swing.JButton();
        enemyFirePanel = new javax.swing.JPanel();
        enemyFireLabel = new javax.swing.JLabel();
        enemyFireButton = new javax.swing.JButton();
        enemyFireStatusText = new javax.swing.JTextField();
        enemyFireContinueButton = new javax.swing.JButton();
        playerStraddlePanel = new javax.swing.JPanel();
        playerStraddleLabel = new javax.swing.JLabel();
        playerStraddleItsAHit = new javax.swing.JLabel();
        playerGetDamageButton = new javax.swing.JButton();
        playerGetDamageText = new javax.swing.JTextField();
        playerGetSpecialDamageButton = new javax.swing.JButton();
        playerGetSpecialDamageText = new javax.swing.JTextField();
        playerGetCriticalHitButton = new javax.swing.JButton();
        playerGetCriticalHitText = new javax.swing.JTextField();
        playerStraddleContinueButton = new javax.swing.JButton();
        enemyStraddlePanel = new javax.swing.JPanel();
        enemyStraddleLabel = new javax.swing.JLabel();
        enemyStraddleItsAHit = new javax.swing.JLabel();
        enemyGetDamageButton = new javax.swing.JButton();
        enemyGetDamageText = new javax.swing.JTextField();
        enemyGetSpecialDamageButton = new javax.swing.JButton();
        enemyGetSpecialDamageText = new javax.swing.JTextField();
        enemyGetCriticalHitButton = new javax.swing.JButton();
        enemyGetCriticalHitText = new javax.swing.JTextField();
        enemyStraddleContinueButton = new javax.swing.JButton();
        endOfTurnPanel = new javax.swing.JPanel();
        endTurnButton = new javax.swing.JButton();
        endTurnText = new javax.swing.JTextField();
        endTurnContinueButton = new javax.swing.JButton();
        weatherLabel = new javax.swing.JLabel();
        weatherText = new javax.swing.JLabel();
        rangeLabel = new javax.swing.JLabel();
        rangeText = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(450, 550));

        playersShipLabel.setText("Player's Ship");

        pGuns.setText(playerGuns);

        pGunsQuotation.setText("\"");

        pSternPlus.setText("+");

        pStern.setText(playerStern
        );

        pShipName.setText(playerShipName);

        pBroadsidePlus.setText("+");

        pBroadside.setText(playerBroadside);

        pBowPlus.setText("+");

        pBow.setText(playerBow
        );

        pArmor.setText(playerArmor);

        pSpeedArmorDash.setText("-");

        pSpeed.setText(playerSpeed);

        pTurret.setText(playerTurret);

        pFlotation.setText(playerFlotation);

        javax.swing.GroupLayout playersShipPanelLayout = new javax.swing.GroupLayout(playersShipPanel);
        playersShipPanel.setLayout(playersShipPanelLayout);
        playersShipPanelLayout.setHorizontalGroup(
            playersShipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playersShipPanelLayout.createSequentialGroup()
                .addGroup(playersShipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(playersShipLabel)
                    .addGroup(playersShipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(playersShipPanelLayout.createSequentialGroup()
                            .addComponent(pFlotation)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(pTurret)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(pSpeed)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(pSpeedArmorDash)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(pArmor))
                        .addGroup(playersShipPanelLayout.createSequentialGroup()
                            .addGroup(playersShipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(playersShipPanelLayout.createSequentialGroup()
                                    .addComponent(pSternPlus)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(pStern))
                                .addGroup(playersShipPanelLayout.createSequentialGroup()
                                    .addComponent(pGuns)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(pGunsQuotation)))
                            .addGap(18, 18, 18)
                            .addGroup(playersShipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(playersShipPanelLayout.createSequentialGroup()
                                    .addComponent(pBroadsidePlus)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(pBroadside))
                                .addGroup(playersShipPanelLayout.createSequentialGroup()
                                    .addComponent(pShipName)
                                    .addGap(18, 18, 18)
                                    .addComponent(pBowPlus)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(pBow))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        playersShipPanelLayout.setVerticalGroup(
            playersShipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playersShipPanelLayout.createSequentialGroup()
                .addComponent(playersShipLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(playersShipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pGuns)
                    .addComponent(pGunsQuotation)
                    .addComponent(pBroadsidePlus)
                    .addComponent(pBroadside))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(playersShipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pSternPlus)
                    .addComponent(pStern)
                    .addComponent(pShipName)
                    .addComponent(pBowPlus)
                    .addComponent(pBow))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(playersShipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(pArmor)
                    .addComponent(pSpeedArmorDash)
                    .addComponent(pSpeed)
                    .addComponent(pTurret)
                    .addComponent(pFlotation))
                .addContainerGap())
        );

        enemysShipLabel.setText("Enemy's Ship");

        eGuns.setText(enemyGuns);

        eGunsQuotation.setText("\"");

        eSternPlus.setText("+");

        eStern.setText(enemyStern
        );

        eShipName.setText(enemyShipName);

        eBroadsidePlus.setText("+");

        eBroadside.setText(enemyBroadside);

        eBowPlus.setText("+");

        eBow.setText(enemyBow);

        eArmor.setText(enemyArmor);

        eSpeedArmorDash.setText("-");

        eSpeed.setText(enemySpeed);

        eTurret.setText(enemyTurret);

        eFlotation.setText(enemyFlotation);

        javax.swing.GroupLayout enemysShipPanelLayout = new javax.swing.GroupLayout(enemysShipPanel);
        enemysShipPanel.setLayout(enemysShipPanelLayout);
        enemysShipPanelLayout.setHorizontalGroup(
            enemysShipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(enemysShipPanelLayout.createSequentialGroup()
                .addGroup(enemysShipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(enemysShipLabel)
                    .addGroup(enemysShipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(enemysShipPanelLayout.createSequentialGroup()
                            .addComponent(eFlotation)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(eTurret)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                            .addComponent(eSpeed)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(eSpeedArmorDash)
                            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                            .addComponent(eArmor))
                        .addGroup(enemysShipPanelLayout.createSequentialGroup()
                            .addGroup(enemysShipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(enemysShipPanelLayout.createSequentialGroup()
                                    .addComponent(eSternPlus)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(eStern))
                                .addGroup(enemysShipPanelLayout.createSequentialGroup()
                                    .addComponent(eGuns)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(eGunsQuotation)))
                            .addGap(18, 18, 18)
                            .addGroup(enemysShipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(enemysShipPanelLayout.createSequentialGroup()
                                    .addComponent(eBroadsidePlus)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(eBroadside))
                                .addGroup(enemysShipPanelLayout.createSequentialGroup()
                                    .addComponent(eShipName)
                                    .addGap(18, 18, 18)
                                    .addComponent(eBowPlus)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(eBow))))))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        enemysShipPanelLayout.setVerticalGroup(
            enemysShipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(enemysShipPanelLayout.createSequentialGroup()
                .addComponent(enemysShipLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(enemysShipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eGuns)
                    .addComponent(eGunsQuotation)
                    .addComponent(eBroadsidePlus)
                    .addComponent(eBroadside))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(enemysShipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eSternPlus)
                    .addComponent(eStern)
                    .addComponent(eShipName)
                    .addComponent(eBowPlus)
                    .addComponent(eBow))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(enemysShipPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(eArmor)
                    .addComponent(eSpeedArmorDash)
                    .addComponent(eSpeed)
                    .addComponent(eTurret)
                    .addComponent(eFlotation))
                .addContainerGap())
        );

        die1.setEditable(false);
        die1.setText("1");

        die2.setEditable(false);
        die2.setText("1");
        die2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                die2ActionPerformed(evt);
            }
        });

        die3.setEditable(false);
        die3.setText("1");

        rollDiceButton.setText("Roll Dice");
        rollDiceButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rollDiceButtonActionPerformed(evt);
            }
        });

        turnsCardPanel.setLayout(new java.awt.CardLayout());

        getFirstTurnPanel.setName("getFirstTurnCard"); // NOI18N

        getFirstTurnButton.setText("Get First Turn");
        getFirstTurnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getFirstTurnButtonActionPerformed(evt);
            }
        });

        getFirstTurnText.setEditable(false);
        getFirstTurnText.setText("?");

        continueFirstTurnButton.setText("Continue");
        continueFirstTurnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                continueFirstTurnButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout getFirstTurnPanelLayout = new javax.swing.GroupLayout(getFirstTurnPanel);
        getFirstTurnPanel.setLayout(getFirstTurnPanelLayout);
        getFirstTurnPanelLayout.setHorizontalGroup(
            getFirstTurnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(getFirstTurnPanelLayout.createSequentialGroup()
                .addGroup(getFirstTurnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(getFirstTurnPanelLayout.createSequentialGroup()
                        .addComponent(getFirstTurnButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(getFirstTurnText, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(continueFirstTurnButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        getFirstTurnPanelLayout.setVerticalGroup(
            getFirstTurnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(getFirstTurnPanelLayout.createSequentialGroup()
                .addGroup(getFirstTurnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(getFirstTurnButton)
                    .addComponent(getFirstTurnText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(continueFirstTurnButton))
        );

        turnsCardPanel.add(getFirstTurnPanel, "getFirstTurnCard");

        playerTurnPanel.setName("playerTurnCard"); // NOI18N

        playerTurnLabel.setText("Player's Turn");

        playersChoices.add(closeRadioButton);
        closeRadioButton.setText("Close");
        closeRadioButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeRadioButtonActionPerformed(evt);
            }
        });

        playersChoices.add(offerBroadsideRadioButton);
        offerBroadsideRadioButton.setText("Offer Broadside");

        playersChoices.add(withdrawRadioButton);
        withdrawRadioButton.setText("Withdraw");

        continuePlayerTurnButton.setText("Select and Continue");
        continuePlayerTurnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                continuePlayerTurnButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout playerTurnPanelLayout = new javax.swing.GroupLayout(playerTurnPanel);
        playerTurnPanel.setLayout(playerTurnPanelLayout);
        playerTurnPanelLayout.setHorizontalGroup(
            playerTurnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerTurnPanelLayout.createSequentialGroup()
                .addComponent(playerTurnLabel)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(playerTurnPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(playerTurnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(closeRadioButton)
                    .addComponent(offerBroadsideRadioButton)
                    .addComponent(withdrawRadioButton)
                    .addComponent(continuePlayerTurnButton))
                .addContainerGap(671, Short.MAX_VALUE))
        );
        playerTurnPanelLayout.setVerticalGroup(
            playerTurnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerTurnPanelLayout.createSequentialGroup()
                .addComponent(playerTurnLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(closeRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(offerBroadsideRadioButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(withdrawRadioButton)
                .addGap(18, 18, 18)
                .addComponent(continuePlayerTurnButton)
                .addGap(0, 186, Short.MAX_VALUE))
        );

        turnsCardPanel.add(playerTurnPanel, "playerTurnCard");

        enemyTurnPanel.setName("enemyTurnCard"); // NOI18N

        enemyTurnLabel.setText("Enemy's Turn");

        getEnemyMoveButton.setText("Get Enemy's Move");
        getEnemyMoveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getEnemyMoveButtonActionPerformed(evt);
            }
        });

        enemyMoveText.setEditable(false);
        enemyMoveText.setText("?");

        continueEnemyTurnButton.setText("Continue");
        continueEnemyTurnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                continueEnemyTurnButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout enemyTurnPanelLayout = new javax.swing.GroupLayout(enemyTurnPanel);
        enemyTurnPanel.setLayout(enemyTurnPanelLayout);
        enemyTurnPanelLayout.setHorizontalGroup(
            enemyTurnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(enemyTurnPanelLayout.createSequentialGroup()
                .addComponent(enemyTurnLabel)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(enemyTurnPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(enemyTurnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(continueEnemyTurnButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(enemyTurnPanelLayout.createSequentialGroup()
                        .addComponent(getEnemyMoveButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(enemyMoveText, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(575, Short.MAX_VALUE))
        );
        enemyTurnPanelLayout.setVerticalGroup(
            enemyTurnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(enemyTurnPanelLayout.createSequentialGroup()
                .addComponent(enemyTurnLabel)
                .addGap(18, 18, 18)
                .addGroup(enemyTurnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(getEnemyMoveButton)
                    .addComponent(enemyMoveText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(continueEnemyTurnButton)
                .addContainerGap())
        );

        turnsCardPanel.add(enemyTurnPanel, "enemyTurnCard");

        playerFirePanel.setName("playerFireCard"); // NOI18N

        playerFireLabel.setText("Player's Turn");

        playerFireButton.setText("FIRE!");
        playerFireButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerFireButtonActionPerformed(evt);
            }
        });

        playerFireStatusText.setEditable(false);
        playerFireStatusText.setText("Status");

        playerFireContinueButton.setText("Continue");
        playerFireContinueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerFireContinueButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout playerFirePanelLayout = new javax.swing.GroupLayout(playerFirePanel);
        playerFirePanel.setLayout(playerFirePanelLayout);
        playerFirePanelLayout.setHorizontalGroup(
            playerFirePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerFirePanelLayout.createSequentialGroup()
                .addComponent(playerFireLabel)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, playerFirePanelLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(playerFirePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(playerFireContinueButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(playerFirePanelLayout.createSequentialGroup()
                        .addComponent(playerFireButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(playerFireStatusText, javax.swing.GroupLayout.PREFERRED_SIZE, 70, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(693, 693, 693))
        );
        playerFirePanelLayout.setVerticalGroup(
            playerFirePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerFirePanelLayout.createSequentialGroup()
                .addComponent(playerFireLabel)
                .addGap(18, 18, 18)
                .addGroup(playerFirePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playerFireButton)
                    .addComponent(playerFireStatusText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(playerFireContinueButton))
        );

        turnsCardPanel.add(playerFirePanel, "playerFireCard");

        enemyFirePanel.setName("enemyFireCard"); // NOI18N

        enemyFireLabel.setText("Enemy's Turn");

        enemyFireButton.setText("FIRE!");
        enemyFireButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enemyFireButtonActionPerformed(evt);
            }
        });

        enemyFireStatusText.setEditable(false);
        enemyFireStatusText.setText("Status");
        enemyFireStatusText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enemyFireStatusTextActionPerformed(evt);
            }
        });

        enemyFireContinueButton.setText("Continue");
        enemyFireContinueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enemyFireContinueButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout enemyFirePanelLayout = new javax.swing.GroupLayout(enemyFirePanel);
        enemyFirePanel.setLayout(enemyFirePanelLayout);
        enemyFirePanelLayout.setHorizontalGroup(
            enemyFirePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(enemyFirePanelLayout.createSequentialGroup()
                .addComponent(enemyFireLabel)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(enemyFirePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(enemyFirePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(enemyFireContinueButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(enemyFirePanelLayout.createSequentialGroup()
                        .addComponent(enemyFireButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(enemyFireStatusText, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(688, Short.MAX_VALUE))
        );
        enemyFirePanelLayout.setVerticalGroup(
            enemyFirePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(enemyFirePanelLayout.createSequentialGroup()
                .addComponent(enemyFireLabel)
                .addGap(18, 18, 18)
                .addGroup(enemyFirePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enemyFireButton)
                    .addComponent(enemyFireStatusText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(enemyFireContinueButton)
                .addContainerGap())
        );

        turnsCardPanel.add(enemyFirePanel, "enemyFireCard");

        playerStraddlePanel.setName("playerStraddleCard"); // NOI18N

        playerStraddleLabel.setText("Player's Turn");

        playerStraddleItsAHit.setText("IT'S A HIT!");

        playerGetDamageButton.setText("Get Damage");
        playerGetDamageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerGetDamageButtonActionPerformed(evt);
            }
        });

        playerGetDamageText.setEditable(false);
        playerGetDamageText.setText("?");

        playerGetSpecialDamageButton.setText("No Special Damage");
        playerGetSpecialDamageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerGetSpecialDamageButtonActionPerformed(evt);
            }
        });

        playerGetSpecialDamageText.setEditable(false);
        playerGetSpecialDamageText.setText("?");

        playerGetCriticalHitButton.setText("No Critical Hit");
        playerGetCriticalHitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerGetCriticalHitButtonActionPerformed(evt);
            }
        });

        playerGetCriticalHitText.setEditable(false);
        playerGetCriticalHitText.setText("?");

        playerStraddleContinueButton.setText("DO DAMAGE! (Continue)");
        playerStraddleContinueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                playerStraddleContinueButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout playerStraddlePanelLayout = new javax.swing.GroupLayout(playerStraddlePanel);
        playerStraddlePanel.setLayout(playerStraddlePanelLayout);
        playerStraddlePanelLayout.setHorizontalGroup(
            playerStraddlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerStraddlePanelLayout.createSequentialGroup()
                .addComponent(playerStraddleLabel)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(playerStraddlePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(playerStraddlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(playerStraddleItsAHit)
                    .addComponent(playerStraddleContinueButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(playerStraddlePanelLayout.createSequentialGroup()
                        .addGroup(playerStraddlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(playerGetSpecialDamageButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(playerGetCriticalHitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(playerGetDamageButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(playerStraddlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(playerGetCriticalHitText)
                            .addComponent(playerGetSpecialDamageText)
                            .addGroup(playerStraddlePanelLayout.createSequentialGroup()
                                .addComponent(playerGetDamageText, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE)))))
                .addContainerGap(577, Short.MAX_VALUE))
        );
        playerStraddlePanelLayout.setVerticalGroup(
            playerStraddlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(playerStraddlePanelLayout.createSequentialGroup()
                .addComponent(playerStraddleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(playerStraddleItsAHit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(playerStraddlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playerGetDamageButton)
                    .addComponent(playerGetDamageText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(playerStraddlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playerGetSpecialDamageButton)
                    .addComponent(playerGetSpecialDamageText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(playerStraddlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(playerGetCriticalHitButton)
                    .addComponent(playerGetCriticalHitText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(playerStraddleContinueButton)
                .addContainerGap())
        );

        turnsCardPanel.add(playerStraddlePanel, "playerStraddleCard");

        enemyStraddlePanel.setName("playerStraddleCard"); // NOI18N

        enemyStraddleLabel.setText("Enemy's Turn");

        enemyStraddleItsAHit.setText("IT'S A HIT!");

        enemyGetDamageButton.setText("Get Damage");
        enemyGetDamageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enemyGetDamageButtonActionPerformed(evt);
            }
        });

        enemyGetDamageText.setEditable(false);
        enemyGetDamageText.setText("?");

        enemyGetSpecialDamageButton.setText("No Special Damage");
        enemyGetSpecialDamageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enemyGetSpecialDamageButtonActionPerformed(evt);
            }
        });

        enemyGetSpecialDamageText.setEditable(false);
        enemyGetSpecialDamageText.setText("?");

        enemyGetCriticalHitButton.setText("No Critical Hit");
        enemyGetCriticalHitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enemyGetCriticalHitButtonActionPerformed(evt);
            }
        });

        enemyGetCriticalHitText.setEditable(false);
        enemyGetCriticalHitText.setText("?");
        enemyGetCriticalHitText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enemyGetCriticalHitTextActionPerformed(evt);
            }
        });

        enemyStraddleContinueButton.setText("Recieve Damage... (Continue)");
        enemyStraddleContinueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                enemyStraddleContinueButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout enemyStraddlePanelLayout = new javax.swing.GroupLayout(enemyStraddlePanel);
        enemyStraddlePanel.setLayout(enemyStraddlePanelLayout);
        enemyStraddlePanelLayout.setHorizontalGroup(
            enemyStraddlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(enemyStraddlePanelLayout.createSequentialGroup()
                .addComponent(enemyStraddleLabel)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(enemyStraddlePanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(enemyStraddlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(enemyStraddleItsAHit)
                    .addGroup(enemyStraddlePanelLayout.createSequentialGroup()
                        .addGroup(enemyStraddlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(enemyGetSpecialDamageButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(enemyGetDamageButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(enemyGetCriticalHitButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(enemyStraddlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(enemyGetCriticalHitText)
                            .addComponent(enemyGetDamageText)
                            .addComponent(enemyGetSpecialDamageText, javax.swing.GroupLayout.DEFAULT_SIZE, 70, Short.MAX_VALUE)))
                    .addComponent(enemyStraddleContinueButton, javax.swing.GroupLayout.DEFAULT_SIZE, 215, Short.MAX_VALUE))
                .addContainerGap(597, Short.MAX_VALUE))
        );
        enemyStraddlePanelLayout.setVerticalGroup(
            enemyStraddlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(enemyStraddlePanelLayout.createSequentialGroup()
                .addComponent(enemyStraddleLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(enemyStraddleItsAHit)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(enemyStraddlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enemyGetDamageButton)
                    .addComponent(enemyGetDamageText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(enemyStraddlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enemyGetSpecialDamageButton)
                    .addComponent(enemyGetSpecialDamageText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(enemyStraddlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(enemyGetCriticalHitButton)
                    .addComponent(enemyGetCriticalHitText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(enemyStraddleContinueButton)
                .addContainerGap())
        );

        turnsCardPanel.add(enemyStraddlePanel, "playerStraddleCard");

        endTurnButton.setText("End Turn");
        endTurnButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endTurnButtonActionPerformed(evt);
            }
        });

        endTurnText.setText("?");

        endTurnContinueButton.setText("Continue");
        endTurnContinueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                endTurnContinueButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout endOfTurnPanelLayout = new javax.swing.GroupLayout(endOfTurnPanel);
        endOfTurnPanel.setLayout(endOfTurnPanelLayout);
        endOfTurnPanelLayout.setHorizontalGroup(
            endOfTurnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(endOfTurnPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(endOfTurnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(endTurnContinueButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(endOfTurnPanelLayout.createSequentialGroup()
                        .addComponent(endTurnButton)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(endTurnText, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(638, Short.MAX_VALUE))
        );
        endOfTurnPanelLayout.setVerticalGroup(
            endOfTurnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(endOfTurnPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(endOfTurnPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(endTurnButton)
                    .addComponent(endTurnText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addComponent(endTurnContinueButton)
                .addContainerGap(252, Short.MAX_VALUE))
        );

        turnsCardPanel.add(endOfTurnPanel, "endOfTurnCard");

        weatherLabel.setText("Weather:");

        weatherText.setText(weatherString);

        rangeLabel.setText("Range:");

        rangeText.setText(rangeString);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(turnsCardPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(94, 94, 94)
                        .addComponent(die1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(die2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(die3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(rollDiceButton)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(weatherLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(weatherText)
                                .addGap(18, 18, 18)
                                .addComponent(rangeLabel)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(rangeText)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(playersShipPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(enemysShipPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 381, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(enemysShipPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(playersShipPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(die1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(die2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(rollDiceButton)
                    .addComponent(die3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(weatherLabel)
                    .addComponent(weatherText)
                    .addComponent(rangeLabel)
                    .addComponent(rangeText))
                .addGap(18, 18, 18)
                .addComponent(turnsCardPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void die2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_die2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_die2ActionPerformed

    private void closeRadioButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeRadioButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_closeRadioButtonActionPerformed

    private void rollDiceButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rollDiceButtonActionPerformed

        int die1Roll;
        int die2Roll;
        int die3Roll;
        die1Roll = (int)(Math.random()*6)+1;
        die2Roll = (int)(Math.random()*6)+1;
        die3Roll = (int)(Math.random()*6)+1;
        String value1 = String.valueOf(die1Roll);
        String value2 = String.valueOf(die2Roll);
        String value3 = String.valueOf(die3Roll);
        die1.setText(value1);
        die2.setText(value2);
        die3.setText(value3);
        // TODO add your handling code here:
    }//GEN-LAST:event_rollDiceButtonActionPerformed

    private void enemyFireStatusTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enemyFireStatusTextActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_enemyFireStatusTextActionPerformed

    private void playerGetCriticalHitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerGetCriticalHitButtonActionPerformed


        String isSpecial = (String)playerGetCriticalHitButton.getText();
        
        if (isSpecial.equals("Get Critical Hit"))
        {
        
            int roll1 = Integer.parseInt(die1.getText());
            int roll2 = Integer.parseInt(die2.getText());
         
            int total = roll1 + roll2;
        
            if (total < 4)
            {
                playerGetCriticalHitText.setText("Flooding");
            }
            else if (total >= 4 && total <= 6)
            {
                playerGetCriticalHitText.setText("Fire Director");
            }
            else if (total == 7)
            {
                playerGetCriticalHitText.setText("Explosion");
            }
            else if (total == 8)
            {
                playerGetCriticalHitText.setText("Bridge/Navigation");
            }
            else if (total >= 9 && total <= 11)
            {
                playerGetCriticalHitText.setText("Gunnery");
            }
            else
            {
                playerGetCriticalHitText.setText("Plunging Fire");
            }
        
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_playerGetCriticalHitButtonActionPerformed

    private void playerStraddleContinueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerStraddleContinueButtonActionPerformed

        String fireStatus = (String)playerGetDamageText.getText();
        int plGuns = Integer.parseInt(pGuns.getText());
        int enGuns = Integer.parseInt(eGuns.getText());
        CardLayout cl = (CardLayout)turnsCardPanel.getLayout();
        int enFlotation = Integer.parseInt(eFlotation.getText());
        int enTurret = Integer.parseInt(eTurret.getText());
        int enSpeed = Integer.parseInt(eSpeed.getText());
        String currRange = (String)rangeText.getText();
        int roll1 = Integer.parseInt(die1.getText());
        int roll2 = Integer.parseInt(die2.getText());
        int enArmor = Integer.parseInt(eArmor.getText());
        int total = roll1 + roll2;
        int totalMinusArmor = total - enArmor;
        
        if (fireStatus.equals("No Effect"))
        {
            if (plGuns >= enGuns)
            {
                cl.show(turnsCardPanel, "enemyFireCard");
            }
            else
            {
                cl.show(turnsCardPanel, "endOfTurnCard");
            }
        }
        else if (fireStatus.equals("F"))
        {
            enFlotation = enFlotation - 1;
            eFlotation.setText(String.valueOf(enFlotation));
            eFlotation.setForeground(Color.RED);
        }
        else if (fireStatus.equals("T"))
        {
            enTurret = enTurret - 1;
            eTurret.setText(String.valueOf(enTurret));
            eTurret.setForeground(Color.RED);
        }
        else if (fireStatus.equals("FS"))
        {
            enFlotation = enFlotation - 1;
            eFlotation.setText(String.valueOf(enFlotation));
            eFlotation.setForeground(Color.RED);
            enSpeed = enSpeed - 2;
            eSpeed.setText(String.valueOf(enSpeed));
            eSpeed.setForeground(Color.RED);
        }
        else if (fireStatus.equals("FF"))
        {
            enFlotation = enFlotation - 2;
            eFlotation.setText(String.valueOf(enFlotation));
            eFlotation.setForeground(Color.RED);
        }
        else if (fireStatus.equals("TT"))
        {
            enTurret = enTurret - 2;
            eTurret.setText(String.valueOf(enTurret));
            eTurret.setForeground(Color.RED);
        }
        else if (fireStatus.equals("FFST"))
        {
            enFlotation = enFlotation - 2;
            eFlotation.setText(String.valueOf(enFlotation));
            eFlotation.setForeground(Color.RED);
            enSpeed = enSpeed - 2;
            eSpeed.setText(String.valueOf(enSpeed));
            eSpeed.setForeground(Color.RED);
            enTurret = enTurret - 1;
            eTurret.setText(String.valueOf(enTurret));
            eTurret.setForeground(Color.RED);
        }
        else if (fireStatus.equals("FFSST"))
        {
            enFlotation = enFlotation - 2;
            eFlotation.setText(String.valueOf(enFlotation));
            eFlotation.setForeground(Color.RED);
            enSpeed = enSpeed - 4;
            eSpeed.setText(String.valueOf(enSpeed));
            eSpeed.setForeground(Color.RED);
            enTurret = enTurret - 1;
            eTurret.setText(String.valueOf(enTurret));
            eTurret.setForeground(Color.RED);
        }
        else if (fireStatus.equals("Special"))
        {
            String specialDamage = (String)playerGetSpecialDamageText.getText();
            
            if (specialDamage.equals("Listing"))
            {
                enFlotation = enFlotation - 2;
                eFlotation.setText(String.valueOf(enFlotation));
                eFlotation.setForeground(Color.RED);
            }
            else if (specialDamage.equals("Flooding") || specialDamage.equals("Hydraulics"))
            {
                enFlotation = enFlotation - 1;
                eFlotation.setText(String.valueOf(enFlotation));
                eFlotation.setForeground(Color.RED);
                enSpeed = enSpeed - 2;
                eSpeed.setText(String.valueOf(enSpeed));
                eSpeed.setForeground(Color.RED);
            }
            else if (specialDamage.equals("Turret"))
            {
                enTurret = enTurret - 1;
                eTurret.setText(String.valueOf(enTurret));
                eTurret.setForeground(Color.RED);
            }
            else if (specialDamage.equals("Engineering"))
            {
                enSpeed = enSpeed - 2;
                eSpeed.setText(String.valueOf(enSpeed));
                eSpeed.setForeground(Color.RED);
            }
            else if (specialDamage.equals("Magazine Flooded"))
            {
                enTurret = enTurret - 2;
                eTurret.setText(String.valueOf(enTurret));
                eTurret.setForeground(Color.RED);
            }
            else if (specialDamage.equals("Transverse Bulkhead"))
            {
                enFlotation = enFlotation - 1;
                eFlotation.setText(String.valueOf(enFlotation));
                eFlotation.setForeground(Color.RED);
            }
            else if (specialDamage.equals("Steering"))
            {
                enSpeed = enSpeed - 4;
                eSpeed.setText(String.valueOf(enSpeed));
                eSpeed.setForeground(Color.RED);
            }
        }
        else if (fireStatus.equals("Critical"))
        {
            String criticalHit = (String)playerGetCriticalHitText.getText();
            
            if (criticalHit.equals("Flooding"))
            {
                enFlotation = enFlotation - 3;
                eFlotation.setText(String.valueOf(enFlotation));
                eFlotation.setForeground(Color.RED);
                enSpeed = enSpeed - 2;
                eSpeed.setText(String.valueOf(enSpeed));
                eSpeed.setForeground(Color.RED);
            }
            else if (criticalHit.equals("Fire Director"))
            {
                enTurret = enTurret - 2;
                eTurret.setText(String.valueOf(enTurret));
                eTurret.setForeground(Color.RED);
            }
            else if (criticalHit.equals("Explosion"))
            {
                if (currRange.equals("Short") || currRange.equals("Medium"))
                {
                    enFlotation = enFlotation - 1;
                    enSpeed = enSpeed - 2;
                }
                enFlotation = enFlotation - 2;
                eFlotation.setText(String.valueOf(enFlotation));
                eFlotation.setForeground(Color.RED);
                enSpeed = enSpeed - 2;
                eSpeed.setText(String.valueOf(enSpeed));
                eSpeed.setForeground(Color.RED);
            }
            else if (criticalHit.equals("Bridge/Navication"))
            {
                enSpeed = enSpeed - 4;
                eSpeed.setText(String.valueOf(enSpeed));
                eSpeed.setForeground(Color.RED);
            }
            else if (criticalHit.equals("Gunnery"))
            {
                enFlotation = enFlotation - 1;
                eFlotation.setText(String.valueOf(enFlotation));
                eFlotation.setForeground(Color.RED);
                enTurret = enTurret - 2;
                eTurret.setText(String.valueOf(enTurret));
                eTurret.setForeground(Color.RED);
            }
            else if (criticalHit.equals("Plunging Fire"))
            {
                if (currRange.equals("Long") || currRange.equals("Extreme"))
                {
                    enFlotation = enFlotation - totalMinusArmor;
                    eFlotation.setText(String.valueOf(enFlotation));
                    eFlotation.setForeground(Color.RED);
                    enSpeed = enSpeed - (totalMinusArmor * 2);
                    eSpeed.setText(String.valueOf(enSpeed));
                    eSpeed.setForeground(Color.RED);
                }
            }
        }
        
        if (enFlotation <= 0)
        {
            jOptionPane1.showMessageDialog(this, "WIN! You sunk the enemy ship!");
        }
        
        if (plGuns >= enGuns)
        {
            cl.show(turnsCardPanel, "enemyFireCard");
        }
        else
        {
            cl.show(turnsCardPanel, "endOfTurnCard");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_playerStraddleContinueButtonActionPerformed

    private void enemyGetCriticalHitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enemyGetCriticalHitButtonActionPerformed

        String isSpecial = (String)enemyGetCriticalHitButton.getText();
        
        if (isSpecial.equals("Get Critical Hit"))
        {
        
            int roll1 = Integer.parseInt(die1.getText());
            int roll2 = Integer.parseInt(die2.getText());
         
            int total = roll1 + roll2;
        
            if (total < 4)
            {
                enemyGetCriticalHitText.setText("Flooding");
            }
            else if (total >= 4 && total <= 6)
            {
                enemyGetCriticalHitText.setText("Fire Director");
            }
            else if (total == 7)
            {
                enemyGetCriticalHitText.setText("Explosion");
            }
            else if (total == 8)
            {
                enemyGetCriticalHitText.setText("Bridge/Navigation");
            }
            else if (total >= 9 && total <= 11)
            {
                enemyGetCriticalHitText.setText("Gunnery");
            }
            else
            {
                enemyGetCriticalHitText.setText("Plunging Fire");
            }
        
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_enemyGetCriticalHitButtonActionPerformed

    private void enemyStraddleContinueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enemyStraddleContinueButtonActionPerformed

        String fireStatus = (String)enemyGetDamageText.getText();
        int plGuns = Integer.parseInt(pGuns.getText());
        int enGuns = Integer.parseInt(eGuns.getText());
        CardLayout cl = (CardLayout)turnsCardPanel.getLayout();
        int plFlotation = Integer.parseInt(pFlotation.getText());
        int plTurret = Integer.parseInt(pTurret.getText());
        int plSpeed = Integer.parseInt(pSpeed.getText());
        String currRange = (String)rangeText.getText();
        int roll1 = Integer.parseInt(die1.getText());
        int roll2 = Integer.parseInt(die2.getText());
        int plArmor = Integer.parseInt(pArmor.getText());
        int total = roll1 + roll2;
        int totalMinusArmor = total - plArmor;
        
        if (fireStatus.equals("No Effect"))
        {
            if (plGuns < enGuns)
            {
                cl.show(turnsCardPanel, "playeryFireCard");
            }
            else
            {
                cl.show(turnsCardPanel, "endOfTurnCard");
            }
        }
        else if (fireStatus.equals("F"))
        {
            plFlotation = plFlotation - 1;
            pFlotation.setText(String.valueOf(plFlotation));
            pFlotation.setForeground(Color.RED);
        }
        else if (fireStatus.equals("T"))
        {
            plTurret = plTurret - 1;
            pTurret.setText(String.valueOf(plTurret));
            pTurret.setForeground(Color.RED);
        }
        else if (fireStatus.equals("FS"))
        {
            plFlotation = plFlotation - 1;
            pFlotation.setText(String.valueOf(plFlotation));
            pFlotation.setForeground(Color.RED);
            plSpeed = plSpeed - 2;
            pSpeed.setText(String.valueOf(plSpeed));
            pSpeed.setForeground(Color.RED);
        }
        else if (fireStatus.equals("FF"))
        {
            plFlotation = plFlotation - 2;
            pFlotation.setText(String.valueOf(plFlotation));
            pFlotation.setForeground(Color.RED);
        }
        else if (fireStatus.equals("TT"))
        {
            plTurret = plTurret - 2;
            pTurret.setText(String.valueOf(plTurret));
            pTurret.setForeground(Color.RED);
        }
        else if (fireStatus.equals("FFST"))
        {
            plFlotation = plFlotation - 2;
            pFlotation.setText(String.valueOf(plFlotation));
            pFlotation.setForeground(Color.RED);
            plSpeed = plSpeed - 2;
            pSpeed.setText(String.valueOf(plSpeed));
            pSpeed.setForeground(Color.RED);
            plTurret = plTurret - 1;
            pTurret.setText(String.valueOf(plTurret));
            pTurret.setForeground(Color.RED);
        }
        else if (fireStatus.equals("FFSST"))
        {
            plFlotation = plFlotation - 2;
            pFlotation.setText(String.valueOf(plFlotation));
            pFlotation.setForeground(Color.RED);
            plSpeed = plSpeed - 4;
            pSpeed.setText(String.valueOf(plSpeed));
            pSpeed.setForeground(Color.RED);
            plTurret = plTurret - 1;
            pTurret.setText(String.valueOf(plTurret));
            pTurret.setForeground(Color.RED);
        }
        else if (fireStatus.equals("Special"))
        {
            String specialDamage = (String)enemyGetSpecialDamageText.getText();
            
            if (specialDamage.equals("Listing"))
            {
                plFlotation = plFlotation - 2;
                pFlotation.setText(String.valueOf(plFlotation));
                pFlotation.setForeground(Color.RED);
            }
            else if (specialDamage.equals("Flooding") || specialDamage.equals("Hydraulics"))
            {
                plFlotation = plFlotation - 1;
                pFlotation.setText(String.valueOf(plFlotation));
                pFlotation.setForeground(Color.RED);
                plSpeed = plSpeed - 2;
                pSpeed.setText(String.valueOf(plSpeed));
                pSpeed.setForeground(Color.RED);
            }
            else if (specialDamage.equals("Turret"))
            {
                plTurret = plTurret - 1;
                pTurret.setText(String.valueOf(plTurret));
                pTurret.setForeground(Color.RED);
            }
            else if (specialDamage.equals("Engineering"))
            {
                plSpeed = plSpeed - 2;
                pSpeed.setText(String.valueOf(plSpeed));
                pSpeed.setForeground(Color.RED);
            }
            else if (specialDamage.equals("Magazine Flooded"))
            {
                plTurret = plTurret - 2;
                pTurret.setText(String.valueOf(plTurret));
                pTurret.setForeground(Color.RED);
            }
            else if (specialDamage.equals("Transverse Bulkhead"))
            {
                plFlotation = plFlotation - 1;
                pFlotation.setText(String.valueOf(plFlotation));
                pFlotation.setForeground(Color.RED);
            }
            else if (specialDamage.equals("Steering"))
            {
                plSpeed = plSpeed - 4;
                pSpeed.setText(String.valueOf(plSpeed));
                pSpeed.setForeground(Color.RED);
            }
        }
        else if (fireStatus.equals("Critical"))
        {
            String criticalHit = (String)enemyGetCriticalHitText.getText();
            
            if (criticalHit.equals("Flooding"))
            {
                plFlotation = plFlotation - 3;
                pFlotation.setText(String.valueOf(plFlotation));
                pFlotation.setForeground(Color.RED);
                plSpeed = plSpeed - 2;
                pSpeed.setText(String.valueOf(plSpeed));
                pSpeed.setForeground(Color.RED);
            }
            else if (criticalHit.equals("Fire Director"))
            {
                plTurret = plTurret - 2;
                pTurret.setText(String.valueOf(plTurret));
                pTurret.setForeground(Color.RED);
            }
            else if (criticalHit.equals("Explosion"))
            {
                if (currRange.equals("Short") || currRange.equals("Medium"))
                {
                    plFlotation = plFlotation - 1;
                    plSpeed = plSpeed - 2;
                }
                plFlotation = plFlotation - 2;
                pFlotation.setText(String.valueOf(plFlotation));
                pFlotation.setForeground(Color.RED);
                plSpeed = plSpeed - 2;
                pSpeed.setText(String.valueOf(plSpeed));
                pSpeed.setForeground(Color.RED);
            }
            else if (criticalHit.equals("Bridge/Navication"))
            {
                plSpeed = plSpeed - 4;
                pSpeed.setText(String.valueOf(plSpeed));
                pSpeed.setForeground(Color.RED);
            }
            else if (criticalHit.equals("Gunnery"))
            {
                plFlotation = plFlotation - 1;
                pFlotation.setText(String.valueOf(plFlotation));
                pFlotation.setForeground(Color.RED);
                plTurret = plTurret - 2;
                pTurret.setText(String.valueOf(plTurret));
                pTurret.setForeground(Color.RED);
            }
            else if (criticalHit.equals("Plunging Fire"))
            {
                if (currRange.equals("Long") || currRange.equals("Extreme"))
                {
                    plFlotation = plFlotation - totalMinusArmor;
                    pFlotation.setText(String.valueOf(plFlotation));
                    pFlotation.setForeground(Color.RED);
                    plSpeed = plSpeed - (totalMinusArmor * 2);
                    pSpeed.setText(String.valueOf(plSpeed));
                    pSpeed.setForeground(Color.RED);
                }
            }
        }
        
        if (plFlotation <= 0)
        {
            jOptionPane1.showMessageDialog(this, "LOSE! Your ship was sunk...");
        }
        
        if (plGuns < enGuns)
        {
            cl.show(turnsCardPanel, "playerFireCard");
        }
        else
        {
            cl.show(turnsCardPanel, "endOfTurnCard");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_enemyStraddleContinueButtonActionPerformed

    private void continueFirstTurnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_continueFirstTurnButtonActionPerformed

        String firstTurn = (String)getFirstTurnText.getText();
        CardLayout cl = (CardLayout)turnsCardPanel.getLayout();
        
        if (firstTurn.equals("Player"))
        {
            cl.next(turnsCardPanel);
        }
        else
        {
            cl.show(turnsCardPanel, "enemyTurnCard");
        }
        
        // TODO add your handling code here:
    }//GEN-LAST:event_continueFirstTurnButtonActionPerformed

    private void continuePlayerTurnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_continuePlayerTurnButtonActionPerformed


        String currentRange = (String)rangeText.getText();
        String firstTurn = (String)getFirstTurnText.getText();
        int plGuns = Integer.parseInt(pGuns.getText());
        int enGuns = Integer.parseInt(eGuns.getText());
        CardLayout cl = (CardLayout)turnsCardPanel.getLayout();
        
        if (closeRadioButton.isSelected())
        {
            if (currentRange.equals("Medium"))
            {
                rangeText.setText("Short");
            }
            else if (currentRange.equals("Medium-Long"))
            {
                rangeText.setText("Medium");
            }
            else if (currentRange.equals("Long"))
            {
                rangeText.setText("Medium-Long");
            }
            else if (currentRange.equals("Extreme"))
            {
                rangeText.setText("Long");
            }
            
            if (firstTurn.equals("Player"))
            {
                cl.next(turnsCardPanel);
            }
            else if (plGuns >= enGuns)
            {
                cl.show(turnsCardPanel, "playerFireCard");
            }
            else
            {
                cl.show(turnsCardPanel, "enemyFireCard");
            }
            
        }
        
        
        else if (offerBroadsideRadioButton.isSelected())
        {
            if (firstTurn.equals("Player"))
            {
                cl.next(turnsCardPanel);
            }
            else if (plGuns >= enGuns)
            {
                cl.show(turnsCardPanel, "playerFireCard");
            }
            else
            {
                cl.show(turnsCardPanel, "enemyFireCard");
            }
            
        }
        
        
        else if (withdrawRadioButton.isSelected())
        {
            if (currentRange.equals("Short"))
            {
                rangeText.setText("Medium");
            }
            else if (currentRange.equals("Medium"))
            {
                rangeText.setText("Medium-Long");
            }
            else if (currentRange.equals("Medium-Long"))
            {
                rangeText.setText("Long");
            }
            else if (currentRange.equals("Long"))
            {
                rangeText.setText("Extreme");
            }
            else if (currentRange.equals("Extreme"))
            {
                jOptionPane1.showMessageDialog(this, "DRAW! The ships are out of range.");
            }
            
            if (firstTurn.equals("Player"))
            {
                cl.next(turnsCardPanel);
            }
            else if (plGuns >= enGuns)
            {
                cl.show(turnsCardPanel, "playerFireCard");
            }
            else
            {
                cl.show(turnsCardPanel, "enemyFireCard");
            }
            
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_continuePlayerTurnButtonActionPerformed

    
    private void continueEnemyTurnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_continueEnemyTurnButtonActionPerformed

        String currentRange = (String)rangeText.getText();
        String firstTurn = (String)getFirstTurnText.getText();
        String eMove = (String)enemyMoveText.getText();
        int plGuns = Integer.parseInt(pGuns.getText());
        int enGuns = Integer.parseInt(eGuns.getText());
        CardLayout cl = (CardLayout)turnsCardPanel.getLayout();
        
        if (eMove.equals("Close"))
        {
            if (currentRange.equals("Medium"))
            {
                rangeText.setText("Short");
            }
            else if (currentRange.equals("Medium-Long"))
            {
                rangeText.setText("Medium");
            }
            else if (currentRange.equals("Long"))
            {
                rangeText.setText("Medium-Long");
            }
            else if (currentRange.equals("Extreme"))
            {
                rangeText.setText("Long");
            }
            
            if (firstTurn.equals("Enemy"))
            {
                cl.show(turnsCardPanel, "playerTurnCard");
            }
            else if (plGuns >= enGuns)
            {
                cl.next(turnsCardPanel);
            }
            else
            {
                cl.show(turnsCardPanel, "enemyFireCard");
            }
            
        }
        
        
        else if (eMove.equals("Offer Broadside"))
        {
            if (firstTurn.equals("Enemy"))
            {
                cl.show(turnsCardPanel, "playerTurnCard");
            }
            else if (plGuns >= enGuns)
            {
                cl.next(turnsCardPanel);
            }
            else
            {
                cl.show(turnsCardPanel, "enemyFireCard");
            }
            
        }
        
        
        else if (eMove.equals("Withdraw"))
        {
            if (currentRange.equals("Short"))
            {
                rangeText.setText("Medium");
            }
            else if (currentRange.equals("Medium"))
            {
                rangeText.setText("Medium-Long");
            }
            else if (currentRange.equals("Medium-Long"))
            {
                rangeText.setText("Long");
            }
            else if (currentRange.equals("Long"))
            {
                rangeText.setText("Extreme");
            }
            else if (currentRange.equals("Extreme"))
            {
                jOptionPane1.showMessageDialog(this, "DRAW! The ships are out of range.");
            }
            
            if (firstTurn.equals("Enemy"))
            {
                cl.show(turnsCardPanel, "playerTurnCard");
            }
            else if (plGuns >= enGuns)
            {
                cl.next(turnsCardPanel);
            }
            else
            {
                cl.show(turnsCardPanel, "enemyFireCard");
            }
            
        }// TODO add your handling code here:
    }//GEN-LAST:event_continueEnemyTurnButtonActionPerformed

    private void playerFireContinueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerFireContinueButtonActionPerformed

        CardLayout cl = (CardLayout)turnsCardPanel.getLayout();
        String fireStatus = (String)playerFireStatusText.getText();
        int plGuns = Integer.parseInt(pGuns.getText());
        int enGuns = Integer.parseInt(eGuns.getText());
        
        if (fireStatus.equals("Miss") && plGuns >= enGuns)
        {
            cl.next(turnsCardPanel);
        }
        else if (fireStatus.equals("Miss") && plGuns < enGuns)
        {
            cl.show(turnsCardPanel, "endOfTurnCard");
        }
        else
        {
            cl.show(turnsCardPanel, "playerStraddleCard");
        }
       // TODO add your handling code here:
    }//GEN-LAST:event_playerFireContinueButtonActionPerformed

    private void enemyFireContinueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enemyFireContinueButtonActionPerformed

        CardLayout cl = (CardLayout)turnsCardPanel.getLayout();
        String fireStatus = (String)enemyFireStatusText.getText();
        int plGuns = Integer.parseInt(pGuns.getText());
        int enGuns = Integer.parseInt(eGuns.getText());
        
        if (fireStatus.equals("Miss") && plGuns >= enGuns)
        {
            cl.show(turnsCardPanel, "endOfTurnCard");
        }
        else if (fireStatus.equals("Miss") && plGuns < enGuns)
        {
            cl.show(turnsCardPanel, "playerFireCard");
        }
        else
        {
            cl.show(turnsCardPanel, "enemyStraddleCard");
        }// TODO add your handling code here:
    }//GEN-LAST:event_enemyFireContinueButtonActionPerformed

    private void enemyGetCriticalHitTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enemyGetCriticalHitTextActionPerformed

        // TODO add your handling code here:
    }//GEN-LAST:event_enemyGetCriticalHitTextActionPerformed

    private void getFirstTurnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getFirstTurnButtonActionPerformed

        int roll = Integer.parseInt(die1.getText());
        int plSpeed = Integer.parseInt(pSpeed.getText());
        int enSpeed = Integer.parseInt(eSpeed.getText());
        if (enSpeed < plSpeed)
        {
            roll = roll + 1;
        }
        else if (enSpeed > plSpeed)
        {
            roll = roll - 1;
        }
        if (roll <= 3)  
        {
            getFirstTurnText.setText("Player");
        }
        else  
        {
            getFirstTurnText.setText("Enemy");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_getFirstTurnButtonActionPerformed

    private void getEnemyMoveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getEnemyMoveButtonActionPerformed

        String lastMove = (String)enemyMoveText.getText();
        int roll = Integer.parseInt(die1.getText());
        int plGuns = Integer.parseInt(pGuns.getText());
        int enGuns = Integer.parseInt(eGuns.getText());
        
        if (enGuns < plGuns)
        {
            roll = roll + 1;
        }
        
        if (roll <= 2)
        {
            enemyMoveText.setText("Close");
        }
        else if (roll == 3 || roll == 4)
        {
            enemyMoveText.setText("Offer Broadside");
        }
        else if (roll == 5)
        {
            if (lastMove.equals("?"))
            {
                enemyMoveText.setText("Offer Broadside");
            }
            else
            {
                enemyMoveText.setText(lastMove);
            }
        }
        else 
        {
            enemyMoveText.setText("Withdraw");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_getEnemyMoveButtonActionPerformed

    private void playerFireButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerFireButtonActionPerformed

        int roll1 = Integer.parseInt(die1.getText());
        int roll2 = Integer.parseInt(die2.getText());
        String currWeather = (String)weatherText.getText();
        String currRange = (String)rangeText.getText();
        
        int total = roll1 + roll2;
        
        if (currWeather.equals("Misty"))
        {
            total = total - 1;
        }
        else if (currWeather.equals("Stormy"))
        {
            total = total - 3;
        }
        
        if (currRange.equals("Short"))
        {
            if (total < 5)
            {
                playerFireStatusText.setText("Miss");
            }
            else
            {
                playerFireStatusText.setText("Straddle");
            }
        }
        else if (currRange.equals("Medium"))
        {
            if (total < 6)
            {
                playerFireStatusText.setText("Miss");
            }
            else
            {
                playerFireStatusText.setText("Straddle");
            }
        }
        else if (currRange.equals("Medium-Long"))
        {
            if (total < 7)
            {
                playerFireStatusText.setText("Miss");
            }
            else
            {
                playerFireStatusText.setText("Straddle");
            }
        }
        else if (currRange.equals("Long"))
        {
            if (total < 8)
            {
                playerFireStatusText.setText("Miss");
            }
            else
            {
                playerFireStatusText.setText("Straddle");
            }
        }
        else
        {
            if (total < 10)
            {
                playerFireStatusText.setText("Miss");
            }
            else
            {
                playerFireStatusText.setText("Straddle");
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_playerFireButtonActionPerformed

    private void enemyFireButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enemyFireButtonActionPerformed

        int roll1 = Integer.parseInt(die1.getText());
        int roll2 = Integer.parseInt(die2.getText());
        String currWeather = (String)weatherText.getText();
        String currRange = (String)rangeText.getText();
        
        int total = roll1 + roll2;
        
        if (currWeather.equals("Misty"))
        {
            total = total - 1;
        }
        else if (currWeather.equals("Stormy"))
        {
            total = total - 3;
        }
        
        if (currRange.equals("Short"))
        {
            if (total < 5)
            {
                enemyFireStatusText.setText("Miss");
            }
            else
            {
                enemyFireStatusText.setText("Straddle");
            }
        }
        else if (currRange.equals("Medium"))
        {
            if (total < 6)
            {
                enemyFireStatusText.setText("Miss");
            }
            else
            {
                enemyFireStatusText.setText("Straddle");
            }
        }
        else if (currRange.equals("Medium-Long"))
        {
            if (total < 7)
            {
                enemyFireStatusText.setText("Miss");
            }
            else
            {
                enemyFireStatusText.setText("Straddle");
            }
        }
        else if (currRange.equals("Long"))
        {
            if (total < 8)
            {
                enemyFireStatusText.setText("Miss");
            }
            else
            {
                enemyFireStatusText.setText("Straddle");
            }
        }
        else
        {
            if (total < 10)
            {
                enemyFireStatusText.setText("Miss");
            }
            else
            {
                enemyFireStatusText.setText("Straddle");
            }
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_enemyFireButtonActionPerformed

    private void enemyGetDamageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enemyGetDamageButtonActionPerformed

        int roll1 = Integer.parseInt(die1.getText());
        int roll2 = Integer.parseInt(die2.getText());
        int roll3 = Integer.parseInt(die3.getText());
        
        int targetArmor = Integer.parseInt(pArmor.getText());
        int myBow = Integer.parseInt(eBow.getText());
        int myBroadside = Integer.parseInt(eBroadside.getText());
        int myStern = Integer.parseInt(eStern.getText());
        String currRange = (String)rangeText.getText();
        int myGuns = Integer.parseInt(eGuns.getText());
        String enemyMove = (String)enemyMoveText.getText();
        
        int total = roll1 + roll2 + roll3;
        total = total - targetArmor;
       
        if (enemyMove.equals("Close"))
        {
            total = total + myBow;
        }
        else if (enemyMove.equals("Offer Broadside"))
        {
            total = total + myBroadside;
        }
        else if (enemyMove.equals("Withdraw"))
        {
            total = total + myStern;
        }
        
        if (currRange.equals("Short"))
        {
            total = total + 5;
        }
        else if (currRange.equals("Medium"))
        {
            total = total + 2;
        }
        else if (currRange.equals("Long"))
        {
            total = total - 2;
        }
        else if (currRange.equals("Extreme"))
        {
            total = total - 5;
        }
        
        if (myGuns == 8 && targetArmor > 2)
        {
            total = total - 1;
        }
        else if (myGuns == 6 && targetArmor > 2)
        {
            total = total - 2;
        }
        
        if (total <= 9)
        {
            enemyGetDamageText.setText("No Effect");
        }
        else if (total == 10)
        {
            enemyGetDamageText.setText("F");
        }
        else if (total == 11 || total == 15)
        {
            enemyGetDamageText.setText("Special");
            enemyGetSpecialDamageButton.setText("Get Special Damage");
        }
        else if (total == 12 || total == 14)
        {
            enemyGetDamageText.setText("T");
        }
        else if (total == 13)
        {
            enemyGetDamageText.setText("SF");
        }
        else if (total == 16 || total >= 21)
        {
            enemyGetDamageText.setText("Critical");
            enemyGetCriticalHitButton.setText("Get Critical Hit");
        }
        else if (total == 17)
        {
            enemyGetDamageText.setText("FF");
        }
        else if (total == 18)
        {
            enemyGetDamageText.setText("TT");
        }
        else if (total == 19)
        {
            enemyGetDamageText.setText("FFST");
        }
        else if (total == 20)
        {
            enemyGetDamageText.setText("FFSST");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_enemyGetDamageButtonActionPerformed

    private void playerGetDamageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerGetDamageButtonActionPerformed

        int roll1 = Integer.parseInt(die1.getText());
        int roll2 = Integer.parseInt(die2.getText());
        int roll3 = Integer.parseInt(die3.getText());
        
        int targetArmor = Integer.parseInt(eArmor.getText());
        int myBow = Integer.parseInt(pBow.getText());
        int myBroadside = Integer.parseInt(pBroadside.getText());
        int myStern = Integer.parseInt(pStern.getText());
        String currRange = (String)rangeText.getText();
        int myGuns = Integer.parseInt(pGuns.getText());
        
        int total = roll1 + roll2 + roll3;
        total = total - targetArmor;
       
        if (closeRadioButton.isSelected())
        {
            total = total + myBow;
        }
        else if (offerBroadsideRadioButton.isSelected())
        {
            total = total + myBroadside;
        }
        else if (withdrawRadioButton.isSelected())
        {
            total = total + myStern;
        }
        
        if (currRange.equals("Short"))
        {
            total = total + 5;
        }
        else if (currRange.equals("Medium"))
        {
            total = total + 2;
        }
        else if (currRange.equals("Long"))
        {
            total = total - 2;
        }
        else if (currRange.equals("Extreme"))
        {
            total = total - 5;
        }
        
        if (myGuns == 8 && targetArmor > 2)
        {
            total = total - 1;
        }
        else if (myGuns == 6 && targetArmor > 2)
        {
            total = total - 2;
        }
        
        if (total <= 9)
        {
            playerGetDamageText.setText("No Effect");
        }
        else if (total == 10)
        {
            playerGetDamageText.setText("F");
        }
        else if (total == 11 || total == 15)
        {
            playerGetDamageText.setText("Special");
            playerGetSpecialDamageButton.setText("Get Special Damage");
        }
        else if (total == 12 || total == 14)
        {
            playerGetDamageText.setText("T");
        }
        else if (total == 13)
        {
            playerGetDamageText.setText("SF");
        }
        else if (total == 16 || total >= 21)
        {
            playerGetDamageText.setText("Critical");
            playerGetCriticalHitButton.setText("Get Critical Hit");
        }
        else if (total == 17)
        {
            playerGetDamageText.setText("FF");
        }
        else if (total == 18)
        {
            playerGetDamageText.setText("TT");
        }
        else if (total == 19)
        {
            playerGetDamageText.setText("FFST");
        }
        else if (total == 20)
        {
            playerGetDamageText.setText("FFSST");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_playerGetDamageButtonActionPerformed

    private void enemyGetSpecialDamageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_enemyGetSpecialDamageButtonActionPerformed

        String isSpecial = (String)enemyGetSpecialDamageButton.getText();
        
        if (isSpecial.equals("Get Special Damage"))
        {
        
            int roll1 = Integer.parseInt(die1.getText());
            int roll2 = Integer.parseInt(die2.getText());
         
            int total = roll1 + roll2;
        
            if (total < 4)
            {
                enemyGetSpecialDamageText.setText("Listing");
            }
            else if (total == 4)
            {
                enemyGetSpecialDamageText.setText("Flooding");
            }
            else if (total == 5)
            {
                enemyGetSpecialDamageText.setText("Fire Control");
            }
            else if (total == 6)
            {
                enemyGetSpecialDamageText.setText("Turret");
            }
            else if (total == 7)
            {
                enemyGetSpecialDamageText.setText("Engineering");
            }
            else if (total == 8)
            {
                enemyGetSpecialDamageText.setText("Hydraulics");
            }
            else if (total == 9)
            {
                enemyGetSpecialDamageText.setText("Magazine Flooded");
            }
            else if (total == 10)
            {
                enemyGetSpecialDamageText.setText("Transverse Bulkheaqd");
            }
            else
            {
                enemyGetSpecialDamageText.setText("Steering");
            }
        
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_enemyGetSpecialDamageButtonActionPerformed

    private void playerGetSpecialDamageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_playerGetSpecialDamageButtonActionPerformed

        String isSpecial = (String)playerGetSpecialDamageButton.getText();
        
        if (isSpecial.equals("Get Special Damage"))
        {
        
            int roll1 = Integer.parseInt(die1.getText());
            int roll2 = Integer.parseInt(die2.getText());
         
            int total = roll1 + roll2;
        
            if (total < 4)
            {
                playerGetSpecialDamageText.setText("Listing");
            }
            else if (total == 4)
            {
                playerGetSpecialDamageText.setText("Flooding");
            }
            else if (total == 5)
            {
                playerGetSpecialDamageText.setText("Fire Control");
            }
            else if (total == 6)
            {
                playerGetSpecialDamageText.setText("Turret");
            }
            else if (total == 7)
            {
                playerGetSpecialDamageText.setText("Engineering");
            }
            else if (total == 8)
            {
                playerGetSpecialDamageText.setText("Hydraulics");
            }
            else if (total == 9)
            {
                playerGetSpecialDamageText.setText("Magazine Flooded");
            }
            else if (total == 10)
            {
                playerGetSpecialDamageText.setText("Transverse Bulkheaqd");
            }
            else
            {
                playerGetSpecialDamageText.setText("Steering");
            }
        
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_playerGetSpecialDamageButtonActionPerformed

    private void endTurnButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endTurnButtonActionPerformed

        int roll = Integer.parseInt(die1.getText());
        String enMove = (String)enemyMoveText.getText();
        String currWeath = (String)weatherText.getText();
        
        if (closeRadioButton.isSelected() || enMove.equals("Close"))
        {
            roll = roll - 1;
        }
        if (withdrawRadioButton.isSelected() || enMove.equals("Withdraw"))
        {
            roll = roll + 1;
        }
        if (currWeath.equals("Misty"))
        {
            roll = roll + 1;
        }
        else if (currWeath.equals("Stormy"))
        {
            roll = roll + 2;
        }
        
        endTurnText.setText(String.valueOf(roll));
        // TODO add your handling code here:
    }//GEN-LAST:event_endTurnButtonActionPerformed

    private void endTurnContinueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_endTurnContinueButtonActionPerformed

        CardLayout cl = (CardLayout)turnsCardPanel.getLayout();
        int endTurnValue = Integer.parseInt(endTurnText.getText());
        String firstTurn = (String)getFirstTurnText.getText();
        
        if (endTurnValue < 6)
        {
            if (firstTurn.equals("Player"))
            {
                cl.show(turnsCardPanel, "playerTurnCard");
            }
            else
            {
                cl.show(turnsCardPanel, "enemyTurnCard");
            }
        }
        else
        {
            jOptionPane1.showMessageDialog(this, "DRAW! Game Over.");
        }
        // TODO add your handling code here:
    }//GEN-LAST:event_endTurnContinueButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static String playerCountry;
    public static String playerType;
    public static String playerGuns;
    public static String playerBroadside;
    public static String playerStern;
    public static String playerShipName;
    public static String playerBow;
    public static String playerFlotation;
    public static String playerTurret;
    public static String playerSpeed;
    public static String playerArmor;
    public static String enemyCountry;
    public static String enemyType;
    public static String enemyGuns;
    public static String enemyBroadside;
    public static String enemyStern;
    public static String enemyShipName;
    public static String enemyBow;
    public static String enemyFlotation;
    public static String enemyTurret;
    public static String enemySpeed;
    public static String enemyArmor;
    public static String weatherString;
    public static String rangeString;

    
    
    
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        playerCountry = args[0];
        playerType = args[1];
        playerGuns = args[2];
        playerBroadside = args[3];
        playerStern = args[4];
        playerShipName = args[5];
        playerBow = args[6];
        playerFlotation = args[7];
        playerTurret = args[8];
        playerSpeed = args[9];
        playerArmor = args[10];
        enemyCountry = args[11];
        enemyType = args[12];
        enemyGuns = args[13];
        enemyBroadside = args[14];
        enemyStern = args[15];
        enemyShipName = args[16];
        enemyBow = args[17];
        enemyFlotation = args[18];
        enemyTurret = args[19];
        enemySpeed = args[20];
        enemyArmor = args[21];
        weatherString = args[22];
        rangeString = args[23];
        
        
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SALVOTurns.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SALVOTurns.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SALVOTurns.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SALVOTurns.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SALVOTurns().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JRadioButton closeRadioButton;
    private javax.swing.JButton continueEnemyTurnButton;
    private javax.swing.JButton continueFirstTurnButton;
    private javax.swing.JButton continuePlayerTurnButton;
    private javax.swing.JTextField die1;
    private javax.swing.JTextField die2;
    private javax.swing.JTextField die3;
    private javax.swing.JLabel eArmor;
    private javax.swing.JLabel eBow;
    private javax.swing.JLabel eBowPlus;
    private javax.swing.JLabel eBroadside;
    private javax.swing.JLabel eBroadsidePlus;
    private javax.swing.JLabel eFlotation;
    private javax.swing.JLabel eGuns;
    private javax.swing.JLabel eGunsQuotation;
    private javax.swing.JLabel eShipName;
    private javax.swing.JLabel eSpeed;
    private javax.swing.JLabel eSpeedArmorDash;
    private javax.swing.JLabel eStern;
    private javax.swing.JLabel eSternPlus;
    private javax.swing.JLabel eTurret;
    private javax.swing.JPanel endOfTurnPanel;
    private javax.swing.JButton endTurnButton;
    private javax.swing.JButton endTurnContinueButton;
    private javax.swing.JTextField endTurnText;
    private javax.swing.JButton enemyFireButton;
    private javax.swing.JButton enemyFireContinueButton;
    private javax.swing.JLabel enemyFireLabel;
    private javax.swing.JPanel enemyFirePanel;
    private javax.swing.JTextField enemyFireStatusText;
    private javax.swing.JButton enemyGetCriticalHitButton;
    private javax.swing.JTextField enemyGetCriticalHitText;
    private javax.swing.JButton enemyGetDamageButton;
    private javax.swing.JTextField enemyGetDamageText;
    private javax.swing.JButton enemyGetSpecialDamageButton;
    private javax.swing.JTextField enemyGetSpecialDamageText;
    private javax.swing.JTextField enemyMoveText;
    private javax.swing.JButton enemyStraddleContinueButton;
    private javax.swing.JLabel enemyStraddleItsAHit;
    private javax.swing.JLabel enemyStraddleLabel;
    private javax.swing.JPanel enemyStraddlePanel;
    private javax.swing.JLabel enemyTurnLabel;
    private javax.swing.JPanel enemyTurnPanel;
    private javax.swing.JLabel enemysShipLabel;
    private javax.swing.JPanel enemysShipPanel;
    private javax.swing.JButton getEnemyMoveButton;
    private javax.swing.JButton getFirstTurnButton;
    private javax.swing.JPanel getFirstTurnPanel;
    private javax.swing.JTextField getFirstTurnText;
    private javax.swing.JOptionPane jOptionPane1;
    private javax.swing.JRadioButton offerBroadsideRadioButton;
    private javax.swing.JLabel pArmor;
    private javax.swing.JLabel pBow;
    private javax.swing.JLabel pBowPlus;
    private javax.swing.JLabel pBroadside;
    private javax.swing.JLabel pBroadsidePlus;
    private javax.swing.JLabel pFlotation;
    private javax.swing.JLabel pGuns;
    private javax.swing.JLabel pGunsQuotation;
    private javax.swing.JLabel pShipName;
    private javax.swing.JLabel pSpeed;
    private javax.swing.JLabel pSpeedArmorDash;
    private javax.swing.JLabel pStern;
    private javax.swing.JLabel pSternPlus;
    private javax.swing.JLabel pTurret;
    private javax.swing.JButton playerFireButton;
    private javax.swing.JButton playerFireContinueButton;
    private javax.swing.JLabel playerFireLabel;
    private javax.swing.JPanel playerFirePanel;
    private javax.swing.JTextField playerFireStatusText;
    private javax.swing.JButton playerGetCriticalHitButton;
    private javax.swing.JTextField playerGetCriticalHitText;
    private javax.swing.JButton playerGetDamageButton;
    private javax.swing.JTextField playerGetDamageText;
    private javax.swing.JButton playerGetSpecialDamageButton;
    private javax.swing.JTextField playerGetSpecialDamageText;
    private javax.swing.JButton playerStraddleContinueButton;
    private javax.swing.JLabel playerStraddleItsAHit;
    private javax.swing.JLabel playerStraddleLabel;
    private javax.swing.JPanel playerStraddlePanel;
    private javax.swing.JLabel playerTurnLabel;
    private javax.swing.JPanel playerTurnPanel;
    private javax.swing.ButtonGroup playersChoices;
    private javax.swing.JLabel playersShipLabel;
    private javax.swing.JPanel playersShipPanel;
    private javax.swing.JLabel rangeLabel;
    private javax.swing.JLabel rangeText;
    private javax.swing.JButton rollDiceButton;
    private javax.swing.JPanel turnsCardPanel;
    private javax.swing.JLabel weatherLabel;
    private javax.swing.JLabel weatherText;
    private javax.swing.JRadioButton withdrawRadioButton;
    // End of variables declaration//GEN-END:variables
}
